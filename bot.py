import logging
import os
import time
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
)
from telegram import Bot
from clip_recognizer import recognize_weapon

# 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = os.environ.get("TOKEN")
PHOTO_PATH = "input_photos/test.jpg"
LOG_FILE = "user_logs.txt"

# –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è —â–æ –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ —ñ—Å–Ω—É—î
os.makedirs(os.path.dirname(PHOTO_PATH), exist_ok=True)

# 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

user_langs = {}
user_locations = {}
user_last_result = {}

# 3. –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü—ñ—ó
def get_lang(update: Update):
    user_id = update.effective_user.id
    return user_langs.get(user_id, "ua")

def log_user_data(user_id, text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] User: {user_id} ‚Äî {text}\n")

# 4. –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext):
    lang = get_lang(update)
    main_menu = ReplyKeyboardMarkup([
        ["üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª", "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è"],
        ["üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"]
    ], resize_keyboard=True)

    text = (
        "üëã –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞ (–∑–±—Ä–æ—è –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å)."
        if lang == "ua"
        else
        "üëã Send me a photo of a suspicious object (weapon or explosive)."
    )
    update.message.reply_text(text, reply_markup=main_menu)

def show_help(update: Update, context: CallbackContext):
    help_text = (
        "üìñ *–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:*\n"
        "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.\n"
        "üìç /location ‚Äî –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.\n"
        "üìÑ /mylog ‚Äî –í–∞—à –∂—É—Ä–Ω–∞–ª –∑–Ω–∞—Ö—ñ–¥–æ–∫.\n"
        "üåê /lang ‚Äî –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É.\n"
        "‚ÑπÔ∏è /help ‚Äî –î–æ–ø–æ–º–æ–≥–∞."
    )
    update.message.reply_text(help_text, parse_mode='Markdown')

def lang(update: Update, context: CallbackContext):
    keyboard = [["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "English üá¨üáß"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:", reply_markup=reply_markup)

def set_language(update: Update, context: CallbackContext):
    choice = update.message.text
    user_id = update.effective_user.id

    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in choice:
        user_langs[user_id] = "ua"
        update.message.reply_text("‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")
    elif "English" in choice:
        user_langs[user_id] = "en"
        update.message.reply_text("‚úÖ Language set to English.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞. –í–∏–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /lang.")

def handle_location(update: Update, context: CallbackContext):
    if update.message.location:
        location = update.message.location
        coords = f"–®–∏—Ä–æ—Ç–∞: {location.latitude}, –î–æ–≤–≥–æ—Ç–∞: {location.longitude}"

        user_id = update.effective_user.id
        user_locations[user_id] = coords
        if user_id in user_last_result:
            log_user_data(user_id, f"{user_last_result[user_id]} | –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {coords}")

        text = (
            f"üìç –í–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\n{coords}\n\n‚ö†Ô∏è –Ø–∫—â–æ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É –∑–æ–Ω—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π ‚Äî –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—Ä—É—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Å–ª—É–∂–±–∞–º."
        )
        update.message.reply_text(text)
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.")

def send_user_log(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not os.path.exists(LOG_FILE):
        update.message.reply_text("üìÇ –õ–æ–≥ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return

    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = [line for line in f if f"User: {user_id}" in line]

    if not lines:
        update.message.reply_text("üìÇ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –∂—É—Ä–Ω–∞–ª—ñ.")
        return

    user_log_path = f"user_{user_id}_log.txt"
    with open(user_log_path, "w", encoding="utf-8") as f:
        f.writelines(lines)

    with open(user_log_path, "rb") as doc:
        update.message.reply_document(InputFile(doc), filename=f"your_log_{user_id}.txt")

    os.remove(user_log_path)

def request_location(update: Update, context: CallbackContext):
    keyboard = [[
        KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è", request_location=True)
    ]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:", reply_markup=reply_markup)

def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    lang = user_langs.get(user_id, "ua")

    photo_file = update.message.photo[-1].get_file()
    photo_file.download(PHOTO_PATH)
    update.message.reply_text("üîç –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è..." if lang == "ua" else "üîç Processing image...")

    try:
        result = recognize_weapon(PHOTO_PATH, "weapon_images", "weapons_db.json")
        user_last_result[user_id] = result.replace("\n", " | ")
        update.message.reply_text(result)
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}" if lang == "ua" else f"‚ö†Ô∏è Recognition error: {e}")

def handle_other(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª":
        send_user_log(update, context)
    elif text == "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è":
        request_location(update, context)
    elif text == "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É":
        lang(update, context)
    elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        show_help(update, context)
    else:
        update.message.reply_text("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é.")

# 5. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    bot = Bot(TOKEN)
    dispatcher = Dispatcher(bot=bot, update_queue=None, use_context=True)

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", show_help))
    dispatcher.add_handler(CommandHandler("lang", lang))
    dispatcher.add_handler(CommandHandler("location", request_location))
    dispatcher.add_handler(CommandHandler("mylog", send_user_log))
    dispatcher.add_handler(MessageHandler(Filters.regex("^(–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶|English üá¨üáß)$"), set_language))
    dispatcher.add_handler(MessageHandler(Filters.location, handle_location))
    dispatcher.add_handler(MessageHandler(Filters.photo, handle_photo))
    dispatcher.add_handler(MessageHandler(Filters.text | Filters.command | Filters.document, handle_other))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")

    while True:
        time.sleep(10)

if __name__ == '__main__':
    main()
