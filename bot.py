import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackQueryHandler, ContextTypes
)
from clip_recognizer import recognize_weapon
from datetime import datetime
from asyncio import to_thread

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
TOKEN = os.environ.get("TOKEN")
PHOTO_PATH = "input_photos/test.jpg"
LOG_FILE = "user_logs.txt"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_langs = {}
user_locations = {}
user_last_result = {}

# –§—É–Ω–∫—Ü—ñ—ó
def get_lang(user_id):
    return user_langs.get(user_id, "ua")

def log_user_data(user_id, text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] User: {user_id} ‚Äî {text}\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang(user_id)

    main_menu = ReplyKeyboardMarkup([
        ["üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª", "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è"],
        ["üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"]
    ], resize_keyboard=True)

    text_ua = (
        "üëã –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞ (–∑–±—Ä–æ—è –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å), —ñ —è —Å–ø—Ä–æ–±—É—é –π–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏.\n\n"
        "üì∑ –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –≥–∞–ª–µ—Ä–µ—ó."
    )
    text_en = (
        "üëã Send me a photo of a suspicious object (weapon or explosive), and I will try to identify it.\n\n"
        "üì∑ You can take a photo or upload one from your gallery."
    )

    await update.message.reply_text(text_ua if lang == "ua" else text_en, reply_markup=main_menu)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:*\n"
        "\nüì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ ‚Äî —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –∑–±—Ä–æ—é –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å."
        "\nüìç /location ‚Äî –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)."
        "\nüìÑ /mylog ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –∂—É—Ä–Ω–∞–ª –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤."
        "\nüåê /lang ‚Äî –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É."
        "\n‚ÑπÔ∏è /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "English üá¨üáß"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:", reply_markup=reply_markup)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    choice = update.message.text

    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in choice:
        user_langs[user_id] = "ua"
        await update.message.reply_text("‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")
    elif "English" in choice:
        user_langs[user_id] = "en"
        await update.message.reply_text("‚úÖ Language set to English.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞. –í–∏–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /lang.")

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message

    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        user_locations[user_id] = f"–®–∏—Ä–æ—Ç–∞: {lat}, –î–æ–≤–≥–æ—Ç–∞: {lon}"

        if user_id in user_last_result:
            log_user_data(user_id, f"{user_last_result[user_id]} | –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat},{lon}")

        coords = f"{lat}, {lon}"
        text = (
            f"üìç –í–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\n{coords}\n\n‚ö†Ô∏è –ù–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —É –∑–æ–Ω—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π!"
        )
        copy_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìé –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏", callback_data=f"copy_{lat}_{lon}")]
        ])
        await update.message.reply_text(text, reply_markup=copy_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("copy_"):
        _, lat, lon = query.data.split("_")
        coords = f"{lat}, {lon}"
        await query.message.reply_text(f"üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {coords}\nhttps://maps.google.com/?q={coords}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang(user_id)

    photo_file = await update.message.photo[-1].get_file()
    os.makedirs(os.path.dirname(PHOTO_PATH), exist_ok=True)
    await photo_file.download_to_drive(PHOTO_PATH)

    text_wait = "üîç –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 110—Å" if lang == "ua" else "üîç Processing image..."
    await update.message.reply_text(text_wait)

        try:
        result = await to_thread(recognize_weapon, PHOTO_PATH, "weapon_images", "weapons_db.json")
        user_last_result[user_id] = result.replace("\n", " | ")

        if lang == "ua":
            result += (
                "\n\nüìû –Ø–∫—â–æ –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ü–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –æ–±‚Äô—î–∫—Ç:\n"
                "–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –¥–æ:\n"
                "‚Ä¢ –î–°–ù–°: +0000000000\n"
                "‚Ä¢ –°–ë–£: +0000000000\n"
                "\nüìç –ë–∞–∂–∞—î—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /location –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –≤–Ω–∏–∑—É."
                "\nüìç –ë–∞–∂–∞—î—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é? –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help"
            )
        else:
            result += (
                "\n\nüìû If you believe this object is dangerous:\n"
                "Please call:\n"
                "‚Ä¢ Emergency Service: +0000000000\n"
                "‚Ä¢ Security Service: +0000000000\n"
                "\nüìç Would you like to share your location? Type /location or use the button below."
            )

        await update.message.reply_text(result)

        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}" if lang == "ua" else f"‚ö†Ô∏è Recognition error: {e}")

async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª":
        await send_user_log(update, context)
    elif text == "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è":
        await request_location(update, context)
    elif text == "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É":
        await lang(update, context)
    elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        await help_command(update, context)
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é.")

async def send_user_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not os.path.exists(LOG_FILE):
        await update.message.reply_text("üìÇ –õ–æ–≥ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return

    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = [line for line in f if f"User: {user_id}" in line]

    if not lines:
        await update.message.reply_text("üìÇ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –∂—É—Ä–Ω–∞–ª—ñ.")
        return

    user_log_path = f"user_{user_id}_log.txt"
    with open(user_log_path, "w", encoding="utf-8") as f:
        f.writelines(lines)

    with open(user_log_path, "rb") as doc:
        await update.message.reply_document(InputFile(doc), filename=f"your_log_{user_id}.txt")

    os.remove(user_log_path)

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(text="üìç –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üìç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—Ç–≤–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=reply_markup)

# ‚ö° –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("lang", lang))
    app.add_handler(CommandHandler("location", request_location))
    app.add_handler(CommandHandler("mylog", send_user_log))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT, handle_other))
    app.add_handler(CallbackQueryHandler(button_handler))

    logging.info("‚úÖ Bot started successfully and polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
