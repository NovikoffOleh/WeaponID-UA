import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    Updater, CommandHandler, MessageHandler,
    Filters, CallbackContext, CallbackQueryHandler
)
from clip_recognizer import recognize_weapon
import os
from datetime import datetime

import os
TOKEN = os.environ.get("TOKEN")

PHOTO_PATH = "input_photos/test.jpg"
LOG_FILE = "user_logs.txt"

logging.basicConfig(level=logging.INFO)

user_langs = {}
user_locations = {}
user_last_result = {}

def get_lang(update: Update):
    user_id = update.effective_user.id
    return user_langs.get(user_id, "ua")

def log_user_data(user_id, text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] User: {user_id} ‚Äî {text}\n")

def send_user_log(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not os.path.exists(LOG_FILE):
        update.message.reply_text("üìÇ –õ–æ–≥ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return

    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = [line for line in f if f"User: {user_id}" in line]

    if not lines:
        update.message.reply_text("üìÇ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –∂—É—Ä–Ω–∞–ª—ñ.")
        return

    user_log_path = f"user_{user_id}_log.txt"
    with open(user_log_path, "w", encoding="utf-8") as f:
        f.writelines(lines)

    with open(user_log_path, "rb") as doc:
        update.message.reply_document(InputFile(doc), filename=f"your_log_{user_id}.txt")

    os.remove(user_log_path)

def show_help(update: Update, context: CallbackContext):
    help_text = (
        "üìñ *–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:*\n"
        "\nüì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ ‚Äî —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –∑–±—Ä–æ—é –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å."
        "\nüìç /location ‚Äî –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)."
        "\nüìÑ /mylog ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –∂—É—Ä–Ω–∞–ª –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤."
        "\nüåê /lang ‚Äî –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É."
        "\n‚ÑπÔ∏è /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é."
    )
    update.message.reply_text(help_text, parse_mode='Markdown')


def start(update: Update, context: CallbackContext):
    lang = get_lang(update)

    main_menu = ReplyKeyboardMarkup([
        ["üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª", "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è"],
        ["üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"]
    ], resize_keyboard=True)

    if lang == "ua":
        update.message.reply_text(
            "üëã –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞ (–∑–±—Ä–æ—è –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å), —ñ —è —Å–ø—Ä–æ–±—É—é –π–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏.\n\nüì∑ –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –≥–∞–ª–µ—Ä–µ—ó.",
            reply_markup=main_menu
        )
    else:
        update.message.reply_text(
            "üëã Send me a photo of a suspicious object (weapon or explosive), and I will try to identify it.\n\nüì∑ You can take a photo or upload one from your gallery.",
            reply_markup=main_menu
        )

def lang(update: Update, context: CallbackContext):
    keyboard = [["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "English üá¨üáß"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:", reply_markup=reply_markup)

def set_language(update: Update, context: CallbackContext):
    choice = update.message.text
    user_id = update.effective_user.id

    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in choice:
        user_langs[user_id] = "ua"
        update.message.reply_text("‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")
    elif "English" in choice:
        user_langs[user_id] = "en"
        update.message.reply_text("‚úÖ Language set to English.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞. –í–∏–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /lang.")

def handle_location(update: Update, context: CallbackContext):
    message = update.message

    if message.location:
        location = message.location
        lat = location.latitude
        lon = location.longitude

        user_id = update.effective_user.id
        coords = f"–®–∏—Ä–æ—Ç–∞: {lat}, –î–æ–≤–≥–æ—Ç–∞: {lon}"
        user_locations[user_id] = coords

        if user_id in user_last_result:
            log_user_data(user_id, f"{user_last_result[user_id]} | –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {coords}")

        text = (
            f"üìç –í–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\n{coords}\n\n‚ö†Ô∏è –£ –∑–æ–Ω—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—Ä—É—á–Ω—É –¥–æ –î–°–ù–°. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é? –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help"
        )

        copy_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìé –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏", callback_data=f"copy_{lat}_{lon}")]
        ])

        update.message.reply_text(text, reply_markup=copy_markup)
    else:
        update.message.reply_text("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó.")

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("copy_"):
        _, lat, lon = query.data.split("_")
        coords = f"{lat}, {lon}"
        query.message.reply_text(f"üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {coords}\n(—Å–∫–æ–ø—ñ—é–π—Ç–µ –≤—Ä—É—á–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–∞ –º–∞–ø—ñ)\nhttps://maps.google.com/?q={coords}")

def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    lang = user_langs.get(user_id, "ua")

    photo_file = update.message.photo[-1].get_file()
    photo_file.download(PHOTO_PATH)
    update.message.reply_text("üîç –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∑–∞—á–µ–∫–∞–π—Ç–µ..." if lang == "ua" else "üîç Processing image, please wait...")

    try:
        result = recognize_weapon(PHOTO_PATH, "weapon_images", "weapons_db.json")
        user_last_result[user_id] = result.replace("\n", " | ")

        if lang == "ua":
            result += (
                "\n\nüìû –Ø–∫—â–æ –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ü–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –æ–±‚Äô—î–∫—Ç:\n"
                "–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –¥–æ:\n"
                "‚Ä¢ –î–°–ù–°: +0000000000\n"
                "‚Ä¢ –°–ë–£: +0000000000\n"
                "\nüìç –ë–∞–∂–∞—î—Ç–µ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /location –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –≤–Ω–∏–∑—É."
                "\nüìç –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é? –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help"
            )
        else:
            result += (
                "\n\nüìû If you believe this object is dangerous:\n"
                "Please call:\n"
                "‚Ä¢ Emergency Service: +0000000000\n"
                "‚Ä¢ Security Service: +0000000000\n"
                "\nüìç Would you like to share your location? Type /location or use the button below."
            )

        update.message.reply_text(result)

    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}" if lang == "ua" else f"‚ö†Ô∏è Recognition error: {e}")

def handle_other(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üìÑ –ú—ñ–π –∂—É—Ä–Ω–∞–ª":
        send_user_log(update, context)
    elif text == "üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è":
        request_location(update, context)
    elif text == "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É":
        lang(update, context)
    elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        show_help(update, context)
    else:
        update.message.reply_text("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é.")

def request_location(update: Update, context: CallbackContext):
    keyboard = [[
        KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è", request_location=True)
    ]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("üìç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è–º. –ú–∏ –ª–∏—à–µ –ø–æ–∫–∞–∂–µ–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —è–∫—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É:", reply_markup=reply_markup)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("lang", lang))
    dp.add_handler(CommandHandler("location", request_location))
    dp.add_handler(CommandHandler("mylog", send_user_log))
    dp.add_handler(CommandHandler("help", show_help))
    dp.add_handler(MessageHandler(Filters.regex("^(–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶|English üá¨üáß)$"), set_language))
    dp.add_handler(MessageHandler(Filters.location, handle_location))
    dp.add_handler(MessageHandler(Filters.photo, handle_photo))
    dp.add_handler(MessageHandler(Filters.text | Filters.command | Filters.document, handle_other))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

