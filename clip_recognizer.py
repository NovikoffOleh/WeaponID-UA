# clip_recognizer.py

import os
import torch
import clip
from PIL import Image
import json
from pathlib import Path

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –∑–±—Ä–æ—ó
with open('weapons_db.json', 'r', encoding='utf-8') as f:
    weapons_data = json.load(f)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)

def load_local_image(path):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    return Image.open(path).convert("RGB")

def recognize_weapon(test_image_path):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–±—Ä–æ—ó."""
    test_image = preprocess(load_local_image(test_image_path)).unsqueeze(0).to(device)

    weapon_names = [weapon["name"] for weapon in weapons_data]
    text_inputs = clip.tokenize(weapon_names).to(device)

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–∑–Ω–∞–∫
    with torch.no_grad():
        image_features = model.encode_image(test_image)
        text_features = model.encode_text(text_inputs)

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
    image_features /= image_features.norm(dim=-1, keepdim=True)
    text_features /= text_features.norm(dim=-1, keepdim=True)

    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    similarities = (100.0 * image_features @ text_features.T).squeeze(0)
    best_idx = similarities.argmax().item()
    highest_similarity = similarities[best_idx].item() / 100.0  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω 0-1

    best_match = weapon_names[best_idx]
    match_info = next((w for w in weapons_data if w["name"] == best_match), None)

    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑—å–∫—É –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
    if highest_similarity < 0.7:
        return (
            f"‚ö†Ô∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∞ (—Å—Ö–æ–∂—ñ—Å—Ç—å: {highest_similarity:.2f}).\n"
            f"–û–±‚Äô—î–∫—Ç –Ω–µ —Å—Ö–æ–∂–∏–π –Ω–∞ –≤—ñ–¥–æ–º—ñ –∑—Ä–∞–∑–∫–∏ –∑–±—Ä–æ—ó –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å—ñ–≤.\n"
            f"–Ø–∫—â–æ –º–∞—î—Ç–µ —Å—É–º–Ω—ñ–≤–∏ ‚Äî –Ω–µ –Ω–∞–±–ª–∏–∂–∞–π—Ç–µ—Å—å —ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –î–°–ù–° –∞–±–æ –ø–æ–ª—ñ—Ü—ñ—ó."
        )

    output = ""

    if match_info:
        output += f"‚úÖ –ú–æ–¥–µ–ª—å: {match_info['name_ua']}\n"
        output += f"üìå –¢–∏–ø: {match_info['type']} ({match_info['category']})\n"
        output += f"üè≥Ô∏è –ö—Ä–∞—ó–Ω–∞: {match_info['country']}\n"
        output += f"üî´ –ö–∞–ª—ñ–±—Ä: {match_info['caliber']}\n"
        output += f"üìè –°—Ö–æ–∂—ñ—Å—Ç—å: {highest_similarity:.4f}\n"

        if match_info["category"] in ["–≥—Ä–∞–Ω–∞—Ç–∏", "–º—ñ–Ω–∏"] and highest_similarity > 0.8:
            output += "\n‚ö†Ô∏è –£–≤–∞–≥–∞! –û–±'—î–∫—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–±—É—Ö–æ–Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º. –ù–µ —Ç–æ—Ä–∫–∞–π—Ç–µ—Å—å!"
    else:
        output = f"‚úÖ –ù–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂–∞ –º–æ–¥–µ–ª—å: {best_match}\nüìè –°—Ö–æ–∂—ñ—Å—Ç—å: {highest_similarity:.4f}"

    return output
