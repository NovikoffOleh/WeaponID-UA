import os
import json
from pathlib import Path
from PIL import Image
import torch
import torchvision.transforms as transforms
from torchvision import models

device = "cuda" if torch.cuda.is_available() else "cpu"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–µ–≥–∫–æ—ó –º–æ–¥–µ–ª—ñ MobileNetV2
model = models.mobilenet_v2(pretrained=True)
model.classifier = torch.nn.Identity()  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
model = model.to(device).eval()

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

def load_image(path):
    image = Image.open(path).convert('RGB')
    return transform(image).unsqueeze(0).to(device)

def load_weapons_db(json_path):
    with open(json_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def collect_image_folders(root_path):
    folders = []
    for path in Path(root_path).rglob('*'):
        if path.is_dir():
            images = list(path.glob('*.jpg')) + list(path.glob('*.jpeg')) + list(path.glob('*.png'))
            if images:
                folders.append(path)
    return folders

def recognize_weapon(test_image_path, reference_folder, db_path):
    weapons_db = load_weapons_db(db_path)

    # –í–∏—Ç—è–≥—É—î–º–æ –æ–∑–Ω–∞–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    test_image = load_image(test_image_path)
    with torch.no_grad():
        test_features = model(test_image)

    best_match = None
    best_similarity = -1
    match_info = None

    for model_path in collect_image_folders(reference_folder):
        model_name = model_path.name
        similarities = []

        for image_path in model_path.glob("*"):
            if image_path.suffix.lower() not in [".jpg", ".jpeg", ".png"]:
                continue

            try:
                ref_image = load_image(str(image_path))
                with torch.no_grad():
                    ref_features = model(ref_image)
                similarity = torch.nn.functional.cosine_similarity(test_features, ref_features).item()
                similarities.append(similarity)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {image_path}: {e}")

        if similarities:
            avg_similarity = sum(similarities) / len(similarities)
            if avg_similarity > best_similarity:
                best_similarity = avg_similarity
                best_match = model_name
                match_info = next((item for item in weapons_db if item["label"] == model_name), None)

    if best_similarity < 0.7:
        return (
            f"‚ö†Ô∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∏–∑—å–∫–∞ (—Å—Ö–æ–∂—ñ—Å—Ç—å: {best_similarity:.2f}).\n"
            f"–û–±‚Äô—î–∫—Ç –Ω–µ —Å—Ö–æ–∂–∏–π –Ω–∞ –≤—ñ–¥–æ–º—ñ –∑—Ä–∞–∑–∫–∏ –∑–±—Ä–æ—ó –∞–±–æ –±–æ—î–ø—Ä–∏–ø–∞—Å—ñ–≤.\n"
            f"–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!"
        )

    output = ""

    if match_info:
        output += f"‚úÖ –ú–æ–¥–µ–ª—å: {match_info['name_ua']}\n"
        output += f"üìå –¢–∏–ø: {match_info['type']} ({match_info['category']})\n"
        output += f"üè≥Ô∏è –ö—Ä–∞—ó–Ω–∞: {match_info['country']}\n"
        output += f"üî´ –ö–∞–ª—ñ–±—Ä: {match_info['caliber']}\n"
        output += f"üìè –°—Ö–æ–∂—ñ—Å—Ç—å: {best_similarity:.4f}\n"

        if match_info["category"] in ["–≥—Ä–∞–Ω–∞—Ç–∏", "–º—ñ–Ω–∏"] and best_similarity > 0.8:
            output += "‚ö†Ô∏è –£–≤–∞–≥–∞! –ú–æ–∂–µ –±—É—Ç–∏ –≤–∏–±—É—Ö–æ–Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º –æ–±‚Äô—î–∫—Ç–æ–º."
    elif best_match:
        output += f"‚úÖ –ù–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂–∞ –º–æ–¥–µ–ª—å: {best_match}\nüìè –°—Ö–æ–∂—ñ—Å—Ç—å: {best_similarity:.4f}"
    else:
        output = "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    return output
